import { useEffect, useState } from 'react';
import { useParams } from 'react-router-dom';
import "./MyBookings.css";
import { axiosInst } from '../../service/axiosInstance';
import jsPDF from 'jspdf';
import { ToastContainer, toast } from 'react-toastify';
import QRCode from 'qrcode';
import 'jspdf-autotable';

function formatDateTime(dateTimeString) {
  const date = new Date(dateTimeString);
  const day = date.getDate().toString().padStart(2, '0');
  const month = (date.getMonth() + 1).toString().padStart(2, '0');
  const hours = date.getHours().toString().padStart(2, '0');
  const minutes = date.getMinutes().toString().padStart(2, '0');
  return `${day}/${month} ${hours}:${minutes}`;
}

function formatDate(dateString) {
  const dateObj = new Date(dateString);
  const year = dateObj.getFullYear();
  const month = String(dateObj.getMonth() + 1).padStart(2, '0'); // Month starts from 0
  const day = String(dateObj.getDate()).padStart(2, '0');

  return `${year}-${month}-${day}`;
}

function MyBookings() {
  const [data, setData] = useState([]);
  const { id } = useParams();

  useEffect(() => {
    const jwtToken = localStorage.getItem("jwtToken");
    const storedId = localStorage.getItem("id");

    if (!jwtToken) {
      window.location = "/login";
    } else if (id !== storedId) {
      window.location =`/bookings/${storedId}`;
    } else {
      fetchData();
    }
  }, []);

  const fetchData = async () => {
    try {
      const res = await axiosInst.get(`/bookings/getbookings/${id}`, {
        headers: {
          Authorization: `Bearer ${localStorage.getItem("jwtToken")}`,
        },
      });
      setData(res.data);
    } catch (error) {
      console.log(error);
    }
  };

  const downloadTicket = async (ticketid) => {
    try {
        const response = await axiosInst.get(`/bookings/getbooking/${ticketid}`, {
            headers: {
                Authorization: `Bearer ${localStorage.getItem("jwtToken")}`,
            },
        });

        const ticketDetails = response.data;

        const doc = new jsPDF();

        // Set font styles


        // Add background color
        doc.setFillColor('#ffffff');
        doc.rect(0, 0, doc.internal.pageSize.width, doc.internal.pageSize.height, 'F');
        doc.setFont("helvetica", "italic");
        doc.setFontSize(10);
        doc.text("This PDF is generated by Spark Bus System 2024", 10, 10);

        // Title
        doc.setFont('helvetica', 'bold');
        doc.setFontSize(24);
        doc.setTextColor('#333');
        doc.text("SPARK BUS", doc.internal.pageSize.width / 2, 30, 'center');

        // Border
        doc.setDrawColor('#333'); // Border color
        doc.setLineWidth(0.5); // Border width
        doc.rect(5, 15, doc.internal.pageSize.width - 10, doc.internal.pageSize.height-25); // Border rectangle with minimized margin


        // QR Code
        const qrText = `Booking ID: ${ticketid}\nBus No: ${ticketDetails.busNo}\nFrom: ${ticketDetails.from} at ${formatDateTime(ticketDetails.startTime)}\nBooking Date: ${formatDate(ticketDetails.bookingDateTime)}`;
        const canvas = document.createElement('canvas');
        await QRCode.toCanvas(canvas, qrText);
        const imageData = canvas.toDataURL('image/jpeg', 1.0);
        doc.addImage(imageData, 'JPEG', 140, 70, 50, 50);

        // Ticket Details
        doc.setFontSize(16);
        doc.setTextColor('#333');
        doc.text(`Ticket Details - Booking ID ${ticketid}`, 20, 100);
        doc.setFontSize(12);
        doc.text(`Bus No: ${ticketDetails.busNo}`, 20, 120);
        doc.text(`From: ${ticketDetails.from} at ${formatDateTime(ticketDetails.startTime)}`, 20, 135);
        doc.text(`To: ${ticketDetails.to} at ${formatDateTime(ticketDetails.endTime)}`, 20, 150);
        doc.text(`Booking Date: ${formatDate(ticketDetails.bookingDateTime)}`, 20, 165);
        const totalPassengers = ticketDetails.seatPassengerList.length;
        doc.text(`Total Passengers: ${totalPassengers}`, 20, 180);


        // passenger
        const startY = 200; // Initial position of the table
        const tableHeight = 20 + totalPassengers * 10; // Height of the table
        const endY = startY + tableHeight; // Final position of the table
        const overflow = endY > doc.internal.pageSize.height; // Check if the table overflows the page

        const passengerTable = [];
        ticketDetails.seatPassengerList.forEach((passenger, index) => {
            passengerTable.push([index + 1, passenger.seatNo, `${passenger.passenger.firstName} ${passenger.passenger.lastName}`, passenger.passenger.gender, passenger.passenger.age]);
        });

        if (!overflow) {
            doc.autoTable({
                startY,
                head: [['#', 'Seat No', 'Name', 'Gender', 'Age']],
                body: passengerTable,
                margin: { top: 10 },
            });
        } else {
            // If table overflows, add it to a new page
            doc.addPage();
            doc.autoTable({
                startY: 50,
                head: [['#', 'Seat No', 'Name', 'Gender', 'Age']],
                body: passengerTable,
                margin: { top: 10 },
            });
        }

        // Terms and Conditions
        let termsY = overflow ? 50 : endY + 20; // Adjust terms position based on table overflow
        doc.setFontSize(10);
        doc.setTextColor('#666');
        const termsAndConditions = `Terms and Conditions:
1. Please arrive at the boarding point 30 minutes before departure time.
2. No refunds or cancellations are allowed after booking.
3. Passengers are responsible for their belongings during the journey.`;
        doc.text(termsAndConditions, 20, termsY);

        // Save PDF
        doc.save(`Spark_${ticketid}_.pdf`);
    } catch (error) {
        console.error("Error downloading ticket:", error);
        toast.error("Something Went Wrong!, Please try again")
    }
};

  
  

  return (
    <div className="login_container">
      <ToastContainer/>
      <div className="login_form_container">
        <div className="left">
          <div className="form_container">
            <h1>My Bookings</h1>
            <table className="map_table">
              <thead>
                <tr>
                  <th>Bus No</th>
                  <th>From</th>
                  <th>To</th>
                  <th>Booking Date</th>
                  <th>Fare</th>
                  <th>Download Ticket</th>
                </tr>
              </thead>
              <tbody>
                {data.slice().reverse().map(location => (
                  <tr key={location.id}>
                    <td>{location.busNo}</td>
                    <td>{location.from} at {formatDateTime(location.startTime)}</td>
                    <td>{location.to} at {formatDateTime(location.endTime)}</td>
                    <td>{formatDate(location.bookingDateTime)}</td>
                    <td>{location.totalFare}</td>
                    <td>
                      <button className='button download' onClick={() => downloadTicket(location.id)}>Download Ticket</button>
                    </td>
                  </tr>
                ))}
              </tbody>
            </table>
          </div>
        </div>
      </div>
    </div>
  );
}

export default MyBookings;